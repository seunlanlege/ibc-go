(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{675:function(e,t,n){"use strict";n.r(t);var i=n(0),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"implementing-the-clientmessage-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementing-the-clientmessage-interface"}},[e._v("#")]),e._v(" Implementing the "),n("code",[e._v("ClientMessage")]),e._v(" interface")]),e._v(" "),n("p",[e._v("As mentioned before in the documentation about "),n("RouterLink",{attrs:{to:"/ibc/light-clients/consensus-state.html"}},[e._v("implementing the "),n("code",[e._v("ConsensusState")]),e._v(" interface")]),e._v(", "),n("a",{attrs:{href:"https://github.com/cosmos/ibc-go/blob/main/modules/core/exported/client.go#L145",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ClientMessage")]),n("OutboundLink")],1),e._v(" is an interface used to update an IBC client. This update may be done by a single header, a batch of headers, misbehaviour, or any type which when verified produces a change to the consensus state of the IBC client. This interface has been purposefully kept generic in order to give the maximum amount of flexibility to the light client implementer.")],1),e._v(" "),n("tm-code-block",{staticClass:"codeblock",attrs:{language:"golang ",base64:"dHlwZSBDbGllbnRNZXNzYWdlIGludGVyZmFjZSB7Cglwcm90by5NZXNzYWdlCgoJQ2xpZW50VHlwZSgpIHN0cmluZwoJVmFsaWRhdGVCYXNpYygpIGVycm9yCn0K"}}),e._v(" "),n("p",[e._v("The "),n("code",[e._v("ClientMessage")]),e._v(" will be passed to the client to be used in "),n("a",{attrs:{href:"https://github.com/cosmos/ibc-go/blob/57da75a70145409247e85365b64a4b2fc6ddad2f/modules/core/02-client/keeper/client.go#L53",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("UpdateClient")]),n("OutboundLink")],1),e._v(", which will handle a number of cases including misbehaviour and/or updating the consensus state. However, this "),n("code",[e._v("UpdateClient")]),e._v(" function will always reference the specific functions determined by the relevant "),n("code",[e._v("ClientState")]),e._v(". This is because "),n("code",[e._v("UpdateClient")]),e._v(" retrieves the client state by client ID (available in "),n("code",[e._v("MsgUpdateClient")]),e._v("). This client state implements the "),n("code",[e._v("ClientState")]),e._v(" interface for a specific client type (e.g. Tendermint). The functions called on the client state instance in "),n("code",[e._v("UpdateClient")]),e._v(" will be the specific implementations of "),n("code",[e._v("VerifyClientMessage")]),e._v(", "),n("code",[e._v("CheckForMisbehaviour")]),e._v(", "),n("code",[e._v("UpdateStateOnMisbehaviour")]),e._v(" and "),n("code",[e._v("UpdateState")]),e._v(" functions of the "),n("code",[e._v("ClientState")]),e._v(" interface for that particular client type.")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);